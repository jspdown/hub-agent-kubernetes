// Code generated by mocktail; DO NOT EDIT.

package state

import (
	"net/url"
	"testing"
	"time"

	"github.com/stretchr/testify/mock"
	"github.com/traefik/hub-agent-kubernetes/pkg/openapi"
)

// openAPISpecLoaderMock mock of OpenAPISpecLoader.
type openAPISpecLoaderMock struct{ mock.Mock }

// newOpenAPISpecLoaderMock creates a new openAPISpecLoaderMock.
func newOpenAPISpecLoaderMock(tb testing.TB) *openAPISpecLoaderMock {
	tb.Helper()

	m := &openAPISpecLoaderMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *openAPISpecLoaderMock) LoadFromURI(uri *url.URL) (*openapi.Spec, error) {
	_ret := _m.Called(uri)

	if _rf, ok := _ret.Get(0).(func(*url.URL) (*openapi.Spec, error)); ok {
		return _rf(uri)
	}

	_ra0, _ := _ret.Get(0).(*openapi.Spec)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *openAPISpecLoaderMock) OnLoadFromURI(uri *url.URL) *openAPISpecLoaderLoadFromURICall {
	return &openAPISpecLoaderLoadFromURICall{Call: _m.Mock.On("LoadFromURI", uri), Parent: _m}
}

func (_m *openAPISpecLoaderMock) OnLoadFromURIRaw(uri interface{}) *openAPISpecLoaderLoadFromURICall {
	return &openAPISpecLoaderLoadFromURICall{Call: _m.Mock.On("LoadFromURI", uri), Parent: _m}
}

type openAPISpecLoaderLoadFromURICall struct {
	*mock.Call
	Parent *openAPISpecLoaderMock
}

func (_c *openAPISpecLoaderLoadFromURICall) Panic(msg string) *openAPISpecLoaderLoadFromURICall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *openAPISpecLoaderLoadFromURICall) Once() *openAPISpecLoaderLoadFromURICall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *openAPISpecLoaderLoadFromURICall) Twice() *openAPISpecLoaderLoadFromURICall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *openAPISpecLoaderLoadFromURICall) Times(i int) *openAPISpecLoaderLoadFromURICall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *openAPISpecLoaderLoadFromURICall) WaitUntil(w <-chan time.Time) *openAPISpecLoaderLoadFromURICall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *openAPISpecLoaderLoadFromURICall) After(d time.Duration) *openAPISpecLoaderLoadFromURICall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *openAPISpecLoaderLoadFromURICall) Run(fn func(args mock.Arguments)) *openAPISpecLoaderLoadFromURICall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *openAPISpecLoaderLoadFromURICall) Maybe() *openAPISpecLoaderLoadFromURICall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *openAPISpecLoaderLoadFromURICall) TypedReturns(a *openapi.Spec, b error) *openAPISpecLoaderLoadFromURICall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *openAPISpecLoaderLoadFromURICall) ReturnsFn(fn func(*url.URL) (*openapi.Spec, error)) *openAPISpecLoaderLoadFromURICall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *openAPISpecLoaderLoadFromURICall) TypedRun(fn func(*url.URL)) *openAPISpecLoaderLoadFromURICall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_uri, _ := args.Get(0).(*url.URL)
		fn(_uri)
	})
	return _c
}

func (_c *openAPISpecLoaderLoadFromURICall) OnLoadFromURI(uri *url.URL) *openAPISpecLoaderLoadFromURICall {
	return _c.Parent.OnLoadFromURI(uri)
}

func (_c *openAPISpecLoaderLoadFromURICall) OnLoadFromURIRaw(uri interface{}) *openAPISpecLoaderLoadFromURICall {
	return _c.Parent.OnLoadFromURIRaw(uri)
}
