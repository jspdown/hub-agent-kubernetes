// Code generated by mocktail; DO NOT EDIT.

package admission

import (
	"context"
	"testing"
	"time"

	"github.com/stretchr/testify/mock"
	"github.com/traefik/hub-agent-kubernetes/pkg/catalog"
	"github.com/traefik/hub-agent-kubernetes/pkg/platform"
)

// platformClientMock mock of PlatformClient.
type platformClientMock struct{ mock.Mock }

// newPlatformClientMock creates a new platformClientMock.
func newPlatformClientMock(tb testing.TB) *platformClientMock {
	tb.Helper()

	m := &platformClientMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *platformClientMock) CreateCatalog(_ context.Context, req *platform.CreateCatalogReq) (*catalog.Catalog, error) {
	_ret := _m.Called(req)

	if _rf, ok := _ret.Get(0).(func(*platform.CreateCatalogReq) (*catalog.Catalog, error)); ok {
		return _rf(req)
	}

	_ra0, _ := _ret.Get(0).(*catalog.Catalog)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *platformClientMock) OnCreateCatalog(req *platform.CreateCatalogReq) *platformClientCreateCatalogCall {
	return &platformClientCreateCatalogCall{Call: _m.Mock.On("CreateCatalog", req), Parent: _m}
}

func (_m *platformClientMock) OnCreateCatalogRaw(req interface{}) *platformClientCreateCatalogCall {
	return &platformClientCreateCatalogCall{Call: _m.Mock.On("CreateCatalog", req), Parent: _m}
}

type platformClientCreateCatalogCall struct {
	*mock.Call
	Parent *platformClientMock
}

func (_c *platformClientCreateCatalogCall) Panic(msg string) *platformClientCreateCatalogCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *platformClientCreateCatalogCall) Once() *platformClientCreateCatalogCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *platformClientCreateCatalogCall) Twice() *platformClientCreateCatalogCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *platformClientCreateCatalogCall) Times(i int) *platformClientCreateCatalogCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *platformClientCreateCatalogCall) WaitUntil(w <-chan time.Time) *platformClientCreateCatalogCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *platformClientCreateCatalogCall) After(d time.Duration) *platformClientCreateCatalogCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *platformClientCreateCatalogCall) Run(fn func(args mock.Arguments)) *platformClientCreateCatalogCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *platformClientCreateCatalogCall) Maybe() *platformClientCreateCatalogCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *platformClientCreateCatalogCall) TypedReturns(a *catalog.Catalog, b error) *platformClientCreateCatalogCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *platformClientCreateCatalogCall) ReturnsFn(fn func(*platform.CreateCatalogReq) (*catalog.Catalog, error)) *platformClientCreateCatalogCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *platformClientCreateCatalogCall) TypedRun(fn func(*platform.CreateCatalogReq)) *platformClientCreateCatalogCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_req, _ := args.Get(0).(*platform.CreateCatalogReq)
		fn(_req)
	})
	return _c
}

func (_c *platformClientCreateCatalogCall) OnCreateCatalog(req *platform.CreateCatalogReq) *platformClientCreateCatalogCall {
	return _c.Parent.OnCreateCatalog(req)
}

func (_c *platformClientCreateCatalogCall) OnDeleteCatalog(name string, lastKnownVersion string) *platformClientDeleteCatalogCall {
	return _c.Parent.OnDeleteCatalog(name, lastKnownVersion)
}

func (_c *platformClientCreateCatalogCall) OnUpdateCatalog(name string, lastKnownVersion string, req *platform.UpdateCatalogReq) *platformClientUpdateCatalogCall {
	return _c.Parent.OnUpdateCatalog(name, lastKnownVersion, req)
}

func (_c *platformClientCreateCatalogCall) OnCreateCatalogRaw(req interface{}) *platformClientCreateCatalogCall {
	return _c.Parent.OnCreateCatalogRaw(req)
}

func (_c *platformClientCreateCatalogCall) OnDeleteCatalogRaw(name interface{}, lastKnownVersion interface{}) *platformClientDeleteCatalogCall {
	return _c.Parent.OnDeleteCatalogRaw(name, lastKnownVersion)
}

func (_c *platformClientCreateCatalogCall) OnUpdateCatalogRaw(name interface{}, lastKnownVersion interface{}, req interface{}) *platformClientUpdateCatalogCall {
	return _c.Parent.OnUpdateCatalogRaw(name, lastKnownVersion, req)
}

func (_m *platformClientMock) DeleteCatalog(_ context.Context, name string, lastKnownVersion string) error {
	_ret := _m.Called(name, lastKnownVersion)

	if _rf, ok := _ret.Get(0).(func(string, string) error); ok {
		return _rf(name, lastKnownVersion)
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *platformClientMock) OnDeleteCatalog(name string, lastKnownVersion string) *platformClientDeleteCatalogCall {
	return &platformClientDeleteCatalogCall{Call: _m.Mock.On("DeleteCatalog", name, lastKnownVersion), Parent: _m}
}

func (_m *platformClientMock) OnDeleteCatalogRaw(name interface{}, lastKnownVersion interface{}) *platformClientDeleteCatalogCall {
	return &platformClientDeleteCatalogCall{Call: _m.Mock.On("DeleteCatalog", name, lastKnownVersion), Parent: _m}
}

type platformClientDeleteCatalogCall struct {
	*mock.Call
	Parent *platformClientMock
}

func (_c *platformClientDeleteCatalogCall) Panic(msg string) *platformClientDeleteCatalogCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *platformClientDeleteCatalogCall) Once() *platformClientDeleteCatalogCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *platformClientDeleteCatalogCall) Twice() *platformClientDeleteCatalogCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *platformClientDeleteCatalogCall) Times(i int) *platformClientDeleteCatalogCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *platformClientDeleteCatalogCall) WaitUntil(w <-chan time.Time) *platformClientDeleteCatalogCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *platformClientDeleteCatalogCall) After(d time.Duration) *platformClientDeleteCatalogCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *platformClientDeleteCatalogCall) Run(fn func(args mock.Arguments)) *platformClientDeleteCatalogCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *platformClientDeleteCatalogCall) Maybe() *platformClientDeleteCatalogCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *platformClientDeleteCatalogCall) TypedReturns(a error) *platformClientDeleteCatalogCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *platformClientDeleteCatalogCall) ReturnsFn(fn func(string, string) error) *platformClientDeleteCatalogCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *platformClientDeleteCatalogCall) TypedRun(fn func(string, string)) *platformClientDeleteCatalogCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_name := args.String(0)
		_lastKnownVersion := args.String(1)
		fn(_name, _lastKnownVersion)
	})
	return _c
}

func (_c *platformClientDeleteCatalogCall) OnCreateCatalog(req *platform.CreateCatalogReq) *platformClientCreateCatalogCall {
	return _c.Parent.OnCreateCatalog(req)
}

func (_c *platformClientDeleteCatalogCall) OnDeleteCatalog(name string, lastKnownVersion string) *platformClientDeleteCatalogCall {
	return _c.Parent.OnDeleteCatalog(name, lastKnownVersion)
}

func (_c *platformClientDeleteCatalogCall) OnUpdateCatalog(name string, lastKnownVersion string, req *platform.UpdateCatalogReq) *platformClientUpdateCatalogCall {
	return _c.Parent.OnUpdateCatalog(name, lastKnownVersion, req)
}

func (_c *platformClientDeleteCatalogCall) OnCreateCatalogRaw(req interface{}) *platformClientCreateCatalogCall {
	return _c.Parent.OnCreateCatalogRaw(req)
}

func (_c *platformClientDeleteCatalogCall) OnDeleteCatalogRaw(name interface{}, lastKnownVersion interface{}) *platformClientDeleteCatalogCall {
	return _c.Parent.OnDeleteCatalogRaw(name, lastKnownVersion)
}

func (_c *platformClientDeleteCatalogCall) OnUpdateCatalogRaw(name interface{}, lastKnownVersion interface{}, req interface{}) *platformClientUpdateCatalogCall {
	return _c.Parent.OnUpdateCatalogRaw(name, lastKnownVersion, req)
}

func (_m *platformClientMock) UpdateCatalog(_ context.Context, name string, lastKnownVersion string, req *platform.UpdateCatalogReq) (*catalog.Catalog, error) {
	_ret := _m.Called(name, lastKnownVersion, req)

	if _rf, ok := _ret.Get(0).(func(string, string, *platform.UpdateCatalogReq) (*catalog.Catalog, error)); ok {
		return _rf(name, lastKnownVersion, req)
	}

	_ra0, _ := _ret.Get(0).(*catalog.Catalog)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *platformClientMock) OnUpdateCatalog(name string, lastKnownVersion string, req *platform.UpdateCatalogReq) *platformClientUpdateCatalogCall {
	return &platformClientUpdateCatalogCall{Call: _m.Mock.On("UpdateCatalog", name, lastKnownVersion, req), Parent: _m}
}

func (_m *platformClientMock) OnUpdateCatalogRaw(name interface{}, lastKnownVersion interface{}, req interface{}) *platformClientUpdateCatalogCall {
	return &platformClientUpdateCatalogCall{Call: _m.Mock.On("UpdateCatalog", name, lastKnownVersion, req), Parent: _m}
}

type platformClientUpdateCatalogCall struct {
	*mock.Call
	Parent *platformClientMock
}

func (_c *platformClientUpdateCatalogCall) Panic(msg string) *platformClientUpdateCatalogCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *platformClientUpdateCatalogCall) Once() *platformClientUpdateCatalogCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *platformClientUpdateCatalogCall) Twice() *platformClientUpdateCatalogCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *platformClientUpdateCatalogCall) Times(i int) *platformClientUpdateCatalogCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *platformClientUpdateCatalogCall) WaitUntil(w <-chan time.Time) *platformClientUpdateCatalogCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *platformClientUpdateCatalogCall) After(d time.Duration) *platformClientUpdateCatalogCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *platformClientUpdateCatalogCall) Run(fn func(args mock.Arguments)) *platformClientUpdateCatalogCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *platformClientUpdateCatalogCall) Maybe() *platformClientUpdateCatalogCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *platformClientUpdateCatalogCall) TypedReturns(a *catalog.Catalog, b error) *platformClientUpdateCatalogCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *platformClientUpdateCatalogCall) ReturnsFn(fn func(string, string, *platform.UpdateCatalogReq) (*catalog.Catalog, error)) *platformClientUpdateCatalogCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *platformClientUpdateCatalogCall) TypedRun(fn func(string, string, *platform.UpdateCatalogReq)) *platformClientUpdateCatalogCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_name := args.String(0)
		_lastKnownVersion := args.String(1)
		_req, _ := args.Get(2).(*platform.UpdateCatalogReq)
		fn(_name, _lastKnownVersion, _req)
	})
	return _c
}

func (_c *platformClientUpdateCatalogCall) OnCreateCatalog(req *platform.CreateCatalogReq) *platformClientCreateCatalogCall {
	return _c.Parent.OnCreateCatalog(req)
}

func (_c *platformClientUpdateCatalogCall) OnDeleteCatalog(name string, lastKnownVersion string) *platformClientDeleteCatalogCall {
	return _c.Parent.OnDeleteCatalog(name, lastKnownVersion)
}

func (_c *platformClientUpdateCatalogCall) OnUpdateCatalog(name string, lastKnownVersion string, req *platform.UpdateCatalogReq) *platformClientUpdateCatalogCall {
	return _c.Parent.OnUpdateCatalog(name, lastKnownVersion, req)
}

func (_c *platformClientUpdateCatalogCall) OnCreateCatalogRaw(req interface{}) *platformClientCreateCatalogCall {
	return _c.Parent.OnCreateCatalogRaw(req)
}

func (_c *platformClientUpdateCatalogCall) OnDeleteCatalogRaw(name interface{}, lastKnownVersion interface{}) *platformClientDeleteCatalogCall {
	return _c.Parent.OnDeleteCatalogRaw(name, lastKnownVersion)
}

func (_c *platformClientUpdateCatalogCall) OnUpdateCatalogRaw(name interface{}, lastKnownVersion interface{}, req interface{}) *platformClientUpdateCatalogCall {
	return _c.Parent.OnUpdateCatalogRaw(name, lastKnownVersion, req)
}

// oasRegistryMock mock of OASRegistry.
type oasRegistryMock struct{ mock.Mock }

// newOasRegistryMock creates a new oasRegistryMock.
func newOasRegistryMock(tb testing.TB) *oasRegistryMock {
	tb.Helper()

	m := &oasRegistryMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *oasRegistryMock) GetURL(name string, namespace string) string {
	_ret := _m.Called(name, namespace)

	if _rf, ok := _ret.Get(0).(func(string, string) string); ok {
		return _rf(name, namespace)
	}

	_ra0 := _ret.String(0)

	return _ra0
}

func (_m *oasRegistryMock) OnGetURL(name string, namespace string) *oasRegistryGetURLCall {
	return &oasRegistryGetURLCall{Call: _m.Mock.On("GetURL", name, namespace), Parent: _m}
}

func (_m *oasRegistryMock) OnGetURLRaw(name interface{}, namespace interface{}) *oasRegistryGetURLCall {
	return &oasRegistryGetURLCall{Call: _m.Mock.On("GetURL", name, namespace), Parent: _m}
}

type oasRegistryGetURLCall struct {
	*mock.Call
	Parent *oasRegistryMock
}

func (_c *oasRegistryGetURLCall) Panic(msg string) *oasRegistryGetURLCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *oasRegistryGetURLCall) Once() *oasRegistryGetURLCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *oasRegistryGetURLCall) Twice() *oasRegistryGetURLCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *oasRegistryGetURLCall) Times(i int) *oasRegistryGetURLCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *oasRegistryGetURLCall) WaitUntil(w <-chan time.Time) *oasRegistryGetURLCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *oasRegistryGetURLCall) After(d time.Duration) *oasRegistryGetURLCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *oasRegistryGetURLCall) Run(fn func(args mock.Arguments)) *oasRegistryGetURLCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *oasRegistryGetURLCall) Maybe() *oasRegistryGetURLCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *oasRegistryGetURLCall) TypedReturns(a string) *oasRegistryGetURLCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *oasRegistryGetURLCall) ReturnsFn(fn func(string, string) string) *oasRegistryGetURLCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *oasRegistryGetURLCall) TypedRun(fn func(string, string)) *oasRegistryGetURLCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_name := args.String(0)
		_namespace := args.String(1)
		fn(_name, _namespace)
	})
	return _c
}

func (_c *oasRegistryGetURLCall) OnGetURL(name string, namespace string) *oasRegistryGetURLCall {
	return _c.Parent.OnGetURL(name, namespace)
}

func (_c *oasRegistryGetURLCall) OnUpdated() *oasRegistryUpdatedCall {
	return _c.Parent.OnUpdated()
}

func (_c *oasRegistryGetURLCall) OnGetURLRaw(name interface{}, namespace interface{}) *oasRegistryGetURLCall {
	return _c.Parent.OnGetURLRaw(name, namespace)
}

func (_c *oasRegistryGetURLCall) OnUpdatedRaw() *oasRegistryUpdatedCall {
	return _c.Parent.OnUpdatedRaw()
}

func (_m *oasRegistryMock) Updated() <-chan struct{} {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() <-chan struct{}); ok {
		return _rf()
	}

	_ra0, _ := _ret.Get(0).(<-chan struct{})

	return _ra0
}

func (_m *oasRegistryMock) OnUpdated() *oasRegistryUpdatedCall {
	return &oasRegistryUpdatedCall{Call: _m.Mock.On("Updated"), Parent: _m}
}

func (_m *oasRegistryMock) OnUpdatedRaw() *oasRegistryUpdatedCall {
	return &oasRegistryUpdatedCall{Call: _m.Mock.On("Updated"), Parent: _m}
}

type oasRegistryUpdatedCall struct {
	*mock.Call
	Parent *oasRegistryMock
}

func (_c *oasRegistryUpdatedCall) Panic(msg string) *oasRegistryUpdatedCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *oasRegistryUpdatedCall) Once() *oasRegistryUpdatedCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *oasRegistryUpdatedCall) Twice() *oasRegistryUpdatedCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *oasRegistryUpdatedCall) Times(i int) *oasRegistryUpdatedCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *oasRegistryUpdatedCall) WaitUntil(w <-chan time.Time) *oasRegistryUpdatedCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *oasRegistryUpdatedCall) After(d time.Duration) *oasRegistryUpdatedCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *oasRegistryUpdatedCall) Run(fn func(args mock.Arguments)) *oasRegistryUpdatedCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *oasRegistryUpdatedCall) Maybe() *oasRegistryUpdatedCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *oasRegistryUpdatedCall) TypedReturns(a <-chan struct{}) *oasRegistryUpdatedCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *oasRegistryUpdatedCall) ReturnsFn(fn func() <-chan struct{}) *oasRegistryUpdatedCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *oasRegistryUpdatedCall) TypedRun(fn func()) *oasRegistryUpdatedCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *oasRegistryUpdatedCall) OnGetURL(name string, namespace string) *oasRegistryGetURLCall {
	return _c.Parent.OnGetURL(name, namespace)
}

func (_c *oasRegistryUpdatedCall) OnUpdated() *oasRegistryUpdatedCall {
	return _c.Parent.OnUpdated()
}

func (_c *oasRegistryUpdatedCall) OnGetURLRaw(name interface{}, namespace interface{}) *oasRegistryGetURLCall {
	return _c.Parent.OnGetURLRaw(name, namespace)
}

func (_c *oasRegistryUpdatedCall) OnUpdatedRaw() *oasRegistryUpdatedCall {
	return _c.Parent.OnUpdatedRaw()
}
