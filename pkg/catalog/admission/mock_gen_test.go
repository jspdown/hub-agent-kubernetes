// Code generated by mocktail; DO NOT EDIT.

package admission

import (
	"context"
	"testing"
	"time"

	"github.com/stretchr/testify/mock"
	"github.com/traefik/hub-agent-kubernetes/pkg/catalog"
	"github.com/traefik/hub-agent-kubernetes/pkg/platform"
)

// backendMock mock of Backend.
type backendMock struct{ mock.Mock }

// newBackendMock creates a new backendMock.
func newBackendMock(tb testing.TB) *backendMock {
	tb.Helper()

	m := &backendMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *backendMock) CreateCatalog(_ context.Context, req *platform.CreateCatalogReq) (*catalog.Catalog, error) {
	_ret := _m.Called(req)

	if _rf, ok := _ret.Get(0).(func(*platform.CreateCatalogReq) (*catalog.Catalog, error)); ok {
		return _rf(req)
	}

	_ra0, _ := _ret.Get(0).(*catalog.Catalog)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *backendMock) OnCreateCatalog(req *platform.CreateCatalogReq) *backendCreateCatalogCall {
	return &backendCreateCatalogCall{Call: _m.Mock.On("CreateCatalog", req), Parent: _m}
}

func (_m *backendMock) OnCreateCatalogRaw(req interface{}) *backendCreateCatalogCall {
	return &backendCreateCatalogCall{Call: _m.Mock.On("CreateCatalog", req), Parent: _m}
}

type backendCreateCatalogCall struct {
	*mock.Call
	Parent *backendMock
}

func (_c *backendCreateCatalogCall) Panic(msg string) *backendCreateCatalogCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *backendCreateCatalogCall) Once() *backendCreateCatalogCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *backendCreateCatalogCall) Twice() *backendCreateCatalogCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *backendCreateCatalogCall) Times(i int) *backendCreateCatalogCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *backendCreateCatalogCall) WaitUntil(w <-chan time.Time) *backendCreateCatalogCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *backendCreateCatalogCall) After(d time.Duration) *backendCreateCatalogCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *backendCreateCatalogCall) Run(fn func(args mock.Arguments)) *backendCreateCatalogCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *backendCreateCatalogCall) Maybe() *backendCreateCatalogCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *backendCreateCatalogCall) TypedReturns(a *catalog.Catalog, b error) *backendCreateCatalogCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *backendCreateCatalogCall) ReturnsFn(fn func(*platform.CreateCatalogReq) (*catalog.Catalog, error)) *backendCreateCatalogCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *backendCreateCatalogCall) TypedRun(fn func(*platform.CreateCatalogReq)) *backendCreateCatalogCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_req, _ := args.Get(0).(*platform.CreateCatalogReq)
		fn(_req)
	})
	return _c
}

func (_c *backendCreateCatalogCall) OnCreateCatalog(req *platform.CreateCatalogReq) *backendCreateCatalogCall {
	return _c.Parent.OnCreateCatalog(req)
}

func (_c *backendCreateCatalogCall) OnDeleteCatalog(name string, lastKnownVersion string) *backendDeleteCatalogCall {
	return _c.Parent.OnDeleteCatalog(name, lastKnownVersion)
}

func (_c *backendCreateCatalogCall) OnUpdateCatalog(name string, lastKnownVersion string, req *platform.UpdateCatalogReq) *backendUpdateCatalogCall {
	return _c.Parent.OnUpdateCatalog(name, lastKnownVersion, req)
}

func (_c *backendCreateCatalogCall) OnCreateCatalogRaw(req interface{}) *backendCreateCatalogCall {
	return _c.Parent.OnCreateCatalogRaw(req)
}

func (_c *backendCreateCatalogCall) OnDeleteCatalogRaw(name interface{}, lastKnownVersion interface{}) *backendDeleteCatalogCall {
	return _c.Parent.OnDeleteCatalogRaw(name, lastKnownVersion)
}

func (_c *backendCreateCatalogCall) OnUpdateCatalogRaw(name interface{}, lastKnownVersion interface{}, req interface{}) *backendUpdateCatalogCall {
	return _c.Parent.OnUpdateCatalogRaw(name, lastKnownVersion, req)
}

func (_m *backendMock) DeleteCatalog(_ context.Context, name string, lastKnownVersion string) error {
	_ret := _m.Called(name, lastKnownVersion)

	if _rf, ok := _ret.Get(0).(func(string, string) error); ok {
		return _rf(name, lastKnownVersion)
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *backendMock) OnDeleteCatalog(name string, lastKnownVersion string) *backendDeleteCatalogCall {
	return &backendDeleteCatalogCall{Call: _m.Mock.On("DeleteCatalog", name, lastKnownVersion), Parent: _m}
}

func (_m *backendMock) OnDeleteCatalogRaw(name interface{}, lastKnownVersion interface{}) *backendDeleteCatalogCall {
	return &backendDeleteCatalogCall{Call: _m.Mock.On("DeleteCatalog", name, lastKnownVersion), Parent: _m}
}

type backendDeleteCatalogCall struct {
	*mock.Call
	Parent *backendMock
}

func (_c *backendDeleteCatalogCall) Panic(msg string) *backendDeleteCatalogCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *backendDeleteCatalogCall) Once() *backendDeleteCatalogCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *backendDeleteCatalogCall) Twice() *backendDeleteCatalogCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *backendDeleteCatalogCall) Times(i int) *backendDeleteCatalogCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *backendDeleteCatalogCall) WaitUntil(w <-chan time.Time) *backendDeleteCatalogCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *backendDeleteCatalogCall) After(d time.Duration) *backendDeleteCatalogCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *backendDeleteCatalogCall) Run(fn func(args mock.Arguments)) *backendDeleteCatalogCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *backendDeleteCatalogCall) Maybe() *backendDeleteCatalogCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *backendDeleteCatalogCall) TypedReturns(a error) *backendDeleteCatalogCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *backendDeleteCatalogCall) ReturnsFn(fn func(string, string) error) *backendDeleteCatalogCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *backendDeleteCatalogCall) TypedRun(fn func(string, string)) *backendDeleteCatalogCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_name := args.String(0)
		_lastKnownVersion := args.String(1)
		fn(_name, _lastKnownVersion)
	})
	return _c
}

func (_c *backendDeleteCatalogCall) OnCreateCatalog(req *platform.CreateCatalogReq) *backendCreateCatalogCall {
	return _c.Parent.OnCreateCatalog(req)
}

func (_c *backendDeleteCatalogCall) OnDeleteCatalog(name string, lastKnownVersion string) *backendDeleteCatalogCall {
	return _c.Parent.OnDeleteCatalog(name, lastKnownVersion)
}

func (_c *backendDeleteCatalogCall) OnUpdateCatalog(name string, lastKnownVersion string, req *platform.UpdateCatalogReq) *backendUpdateCatalogCall {
	return _c.Parent.OnUpdateCatalog(name, lastKnownVersion, req)
}

func (_c *backendDeleteCatalogCall) OnCreateCatalogRaw(req interface{}) *backendCreateCatalogCall {
	return _c.Parent.OnCreateCatalogRaw(req)
}

func (_c *backendDeleteCatalogCall) OnDeleteCatalogRaw(name interface{}, lastKnownVersion interface{}) *backendDeleteCatalogCall {
	return _c.Parent.OnDeleteCatalogRaw(name, lastKnownVersion)
}

func (_c *backendDeleteCatalogCall) OnUpdateCatalogRaw(name interface{}, lastKnownVersion interface{}, req interface{}) *backendUpdateCatalogCall {
	return _c.Parent.OnUpdateCatalogRaw(name, lastKnownVersion, req)
}

func (_m *backendMock) UpdateCatalog(_ context.Context, name string, lastKnownVersion string, req *platform.UpdateCatalogReq) (*catalog.Catalog, error) {
	_ret := _m.Called(name, lastKnownVersion, req)

	if _rf, ok := _ret.Get(0).(func(string, string, *platform.UpdateCatalogReq) (*catalog.Catalog, error)); ok {
		return _rf(name, lastKnownVersion, req)
	}

	_ra0, _ := _ret.Get(0).(*catalog.Catalog)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *backendMock) OnUpdateCatalog(name string, lastKnownVersion string, req *platform.UpdateCatalogReq) *backendUpdateCatalogCall {
	return &backendUpdateCatalogCall{Call: _m.Mock.On("UpdateCatalog", name, lastKnownVersion, req), Parent: _m}
}

func (_m *backendMock) OnUpdateCatalogRaw(name interface{}, lastKnownVersion interface{}, req interface{}) *backendUpdateCatalogCall {
	return &backendUpdateCatalogCall{Call: _m.Mock.On("UpdateCatalog", name, lastKnownVersion, req), Parent: _m}
}

type backendUpdateCatalogCall struct {
	*mock.Call
	Parent *backendMock
}

func (_c *backendUpdateCatalogCall) Panic(msg string) *backendUpdateCatalogCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *backendUpdateCatalogCall) Once() *backendUpdateCatalogCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *backendUpdateCatalogCall) Twice() *backendUpdateCatalogCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *backendUpdateCatalogCall) Times(i int) *backendUpdateCatalogCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *backendUpdateCatalogCall) WaitUntil(w <-chan time.Time) *backendUpdateCatalogCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *backendUpdateCatalogCall) After(d time.Duration) *backendUpdateCatalogCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *backendUpdateCatalogCall) Run(fn func(args mock.Arguments)) *backendUpdateCatalogCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *backendUpdateCatalogCall) Maybe() *backendUpdateCatalogCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *backendUpdateCatalogCall) TypedReturns(a *catalog.Catalog, b error) *backendUpdateCatalogCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *backendUpdateCatalogCall) ReturnsFn(fn func(string, string, *platform.UpdateCatalogReq) (*catalog.Catalog, error)) *backendUpdateCatalogCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *backendUpdateCatalogCall) TypedRun(fn func(string, string, *platform.UpdateCatalogReq)) *backendUpdateCatalogCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_name := args.String(0)
		_lastKnownVersion := args.String(1)
		_req, _ := args.Get(2).(*platform.UpdateCatalogReq)
		fn(_name, _lastKnownVersion, _req)
	})
	return _c
}

func (_c *backendUpdateCatalogCall) OnCreateCatalog(req *platform.CreateCatalogReq) *backendCreateCatalogCall {
	return _c.Parent.OnCreateCatalog(req)
}

func (_c *backendUpdateCatalogCall) OnDeleteCatalog(name string, lastKnownVersion string) *backendDeleteCatalogCall {
	return _c.Parent.OnDeleteCatalog(name, lastKnownVersion)
}

func (_c *backendUpdateCatalogCall) OnUpdateCatalog(name string, lastKnownVersion string, req *platform.UpdateCatalogReq) *backendUpdateCatalogCall {
	return _c.Parent.OnUpdateCatalog(name, lastKnownVersion, req)
}

func (_c *backendUpdateCatalogCall) OnCreateCatalogRaw(req interface{}) *backendCreateCatalogCall {
	return _c.Parent.OnCreateCatalogRaw(req)
}

func (_c *backendUpdateCatalogCall) OnDeleteCatalogRaw(name interface{}, lastKnownVersion interface{}) *backendDeleteCatalogCall {
	return _c.Parent.OnDeleteCatalogRaw(name, lastKnownVersion)
}

func (_c *backendUpdateCatalogCall) OnUpdateCatalogRaw(name interface{}, lastKnownVersion interface{}, req interface{}) *backendUpdateCatalogCall {
	return _c.Parent.OnUpdateCatalogRaw(name, lastKnownVersion, req)
}
