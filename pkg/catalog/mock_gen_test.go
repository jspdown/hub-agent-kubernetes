// Code generated by mocktail; DO NOT EDIT.

package catalog

import (
	"context"
	"testing"
	"time"

	"github.com/stretchr/testify/mock"
)

// platformClientMock mock of PlatformClient.
type platformClientMock struct{ mock.Mock }

// newPlatformClientMock creates a new platformClientMock.
func newPlatformClientMock(tb testing.TB) *platformClientMock {
	tb.Helper()

	m := &platformClientMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *platformClientMock) GetCatalogs(_ context.Context) ([]Catalog, error) {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() ([]Catalog, error)); ok {
		return _rf()
	}

	_ra0, _ := _ret.Get(0).([]Catalog)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *platformClientMock) OnGetCatalogs() *platformClientGetCatalogsCall {
	return &platformClientGetCatalogsCall{Call: _m.Mock.On("GetCatalogs"), Parent: _m}
}

func (_m *platformClientMock) OnGetCatalogsRaw() *platformClientGetCatalogsCall {
	return &platformClientGetCatalogsCall{Call: _m.Mock.On("GetCatalogs"), Parent: _m}
}

type platformClientGetCatalogsCall struct {
	*mock.Call
	Parent *platformClientMock
}

func (_c *platformClientGetCatalogsCall) Panic(msg string) *platformClientGetCatalogsCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *platformClientGetCatalogsCall) Once() *platformClientGetCatalogsCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *platformClientGetCatalogsCall) Twice() *platformClientGetCatalogsCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *platformClientGetCatalogsCall) Times(i int) *platformClientGetCatalogsCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *platformClientGetCatalogsCall) WaitUntil(w <-chan time.Time) *platformClientGetCatalogsCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *platformClientGetCatalogsCall) After(d time.Duration) *platformClientGetCatalogsCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *platformClientGetCatalogsCall) Run(fn func(args mock.Arguments)) *platformClientGetCatalogsCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *platformClientGetCatalogsCall) Maybe() *platformClientGetCatalogsCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *platformClientGetCatalogsCall) TypedReturns(a []Catalog, b error) *platformClientGetCatalogsCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *platformClientGetCatalogsCall) ReturnsFn(fn func() ([]Catalog, error)) *platformClientGetCatalogsCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *platformClientGetCatalogsCall) TypedRun(fn func()) *platformClientGetCatalogsCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *platformClientGetCatalogsCall) OnGetCatalogs() *platformClientGetCatalogsCall {
	return _c.Parent.OnGetCatalogs()
}

func (_c *platformClientGetCatalogsCall) OnGetCatalogsRaw() *platformClientGetCatalogsCall {
	return _c.Parent.OnGetCatalogsRaw()
}
