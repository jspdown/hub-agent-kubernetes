// Code generated by mocktail; DO NOT EDIT.

package devportal

import (
	"testing"
	"time"

	"github.com/stretchr/testify/mock"
)

// updatableHandlerMock mock of UpdatableHandler.
type updatableHandlerMock struct{ mock.Mock }

// newUpdatableHandlerMock creates a new updatableHandlerMock.
func newUpdatableHandlerMock(tb testing.TB) *updatableHandlerMock {
	tb.Helper()

	m := &updatableHandlerMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *updatableHandlerMock) Update(portals []portal) error {
	_ret := _m.Called(portals)

	if _rf, ok := _ret.Get(0).(func([]portal) error); ok {
		return _rf(portals)
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *updatableHandlerMock) OnUpdate(portals []portal) *updatableHandlerUpdateCall {
	return &updatableHandlerUpdateCall{Call: _m.Mock.On("Update", portals), Parent: _m}
}

func (_m *updatableHandlerMock) OnUpdateRaw(portals interface{}) *updatableHandlerUpdateCall {
	return &updatableHandlerUpdateCall{Call: _m.Mock.On("Update", portals), Parent: _m}
}

type updatableHandlerUpdateCall struct {
	*mock.Call
	Parent *updatableHandlerMock
}

func (_c *updatableHandlerUpdateCall) Panic(msg string) *updatableHandlerUpdateCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *updatableHandlerUpdateCall) Once() *updatableHandlerUpdateCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *updatableHandlerUpdateCall) Twice() *updatableHandlerUpdateCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *updatableHandlerUpdateCall) Times(i int) *updatableHandlerUpdateCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *updatableHandlerUpdateCall) WaitUntil(w <-chan time.Time) *updatableHandlerUpdateCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *updatableHandlerUpdateCall) After(d time.Duration) *updatableHandlerUpdateCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *updatableHandlerUpdateCall) Run(fn func(args mock.Arguments)) *updatableHandlerUpdateCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *updatableHandlerUpdateCall) Maybe() *updatableHandlerUpdateCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *updatableHandlerUpdateCall) TypedReturns(a error) *updatableHandlerUpdateCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *updatableHandlerUpdateCall) ReturnsFn(fn func([]portal) error) *updatableHandlerUpdateCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *updatableHandlerUpdateCall) TypedRun(fn func([]portal)) *updatableHandlerUpdateCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_portals, _ := args.Get(0).([]portal)
		fn(_portals)
	})
	return _c
}

func (_c *updatableHandlerUpdateCall) OnUpdate(portals []portal) *updatableHandlerUpdateCall {
	return _c.Parent.OnUpdate(portals)
}

func (_c *updatableHandlerUpdateCall) OnUpdateRaw(portals interface{}) *updatableHandlerUpdateCall {
	return _c.Parent.OnUpdateRaw(portals)
}
